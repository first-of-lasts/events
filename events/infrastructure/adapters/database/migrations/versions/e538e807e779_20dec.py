"""20dec

Revision ID: e538e807e779
Revises: c10af7caf27d
Create Date: 2024-12-20 23:54:19.404100

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'e538e807e779'
down_revision: Union[str, None] = 'c10af7caf27d'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('countries',
    sa.Column('code', sa.String(length=10), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('countries_pkey')),
    sa.UniqueConstraint('code', name=op.f('countries_code_key'))
    )
    op.create_table('country_translations',
    sa.Column('country_id', sa.Integer(), nullable=False),
    sa.Column('language_code', sa.String(length=10), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], name=op.f('country_translations_country_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('country_translations_pkey')),
    sa.UniqueConstraint('country_id', 'language_code', name='uix_country_language')
    )
    op.create_table('regions',
    sa.Column('country_id', sa.Integer(), nullable=False),
    sa.Column('code', sa.String(length=10), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], name=op.f('regions_country_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('regions_pkey'))
    )
    op.create_table('region_translations',
    sa.Column('region_id', sa.Integer(), nullable=False),
    sa.Column('language_code', sa.String(length=10), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['region_id'], ['regions.id'], name=op.f('region_translations_region_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('region_translations_pkey')),
    sa.UniqueConstraint('region_id', 'language_code', name='uix_region_language')
    )
    op.add_column('users', sa.Column('is_active', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('country_id', sa.Integer(), nullable=False))
    op.add_column('users', sa.Column('region_id', sa.Integer(), nullable=False))
    op.create_index('idx_users_country_id', 'users', ['country_id'], unique=False)
    op.create_index('idx_users_region_id', 'users', ['region_id'], unique=False)
    op.create_foreign_key(op.f('users_region_id_fkey'), 'users', 'regions', ['region_id'], ['id'])
    op.create_foreign_key(op.f('users_country_id_fkey'), 'users', 'countries', ['country_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(op.f('users_country_id_fkey'), 'users', type_='foreignkey')
    op.drop_constraint(op.f('users_region_id_fkey'), 'users', type_='foreignkey')
    op.drop_index('idx_users_region_id', table_name='users')
    op.drop_index('idx_users_country_id', table_name='users')
    op.drop_column('users', 'region_id')
    op.drop_column('users', 'country_id')
    op.drop_column('users', 'is_active')
    op.drop_table('region_translations')
    op.drop_table('regions')
    op.drop_table('country_translations')
    op.drop_table('countries')
    # ### end Alembic commands ###
